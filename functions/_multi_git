#!/bin/bash

mgs() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    echo ; echo ; echo ; echo "${pwd}/$d"
    cd "${pwd}/$d"
    git status
  done
  cd ${pwd}
}

mga() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo ; echo ; echo ; echo "${fullPath}"
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || continue

    git status

    echo -n "Add all files (Y/n)?"
    read choice
    case "$choice" in
      n|N ) echo "not adding any files, skipping repo ${fullPath}"; continue ;;
      y|Y|"" ) echo "adding all files for repo ${fullPath}"; git add . ;;
      * ) echo "invalid value, must be y or n"; cd ${pwd}; return 1 ;;
    esac
  done
  cd ${pwd}
}

mgl() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo ; echo ; echo ; echo "${fullPath}"
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || continue

    git checkout main || git checkout master
    git pull
  done
  cd ${pwd}
}

mgb() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo -n "${fullPath}: "
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || { echo "no git repo" ; continue }

    git branch --show-current
  done
  cd ${pwd}
}

mgbAll() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo
    echo "${fullPath}: "
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || { echo "no git repo" ; continue }

    git branch | cat
  done
  cd ${pwd}
}

mgEmail() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo -n "${fullPath}: "
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || { echo "no git repo" ; continue }

    git config --list | grep "user.email" | sed 's/user\.email=//g'
  done
  cd ${pwd}
}

mgDeleteMergedBranches() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo "${fullPath}: "
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || { echo "no git repo" ; continue }

    git checkout main || git checkout master

    git branch --merged | egrep -v " (master|main|dev)" | xargs git branch -d
  done
  cd ${pwd}
}

mgDeleteMergedBranchesForce() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo "${fullPath}: "
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || { echo "no git repo" ; continue }

    git checkout main || git checkout master

    git branch | egrep -v " (master|main|dev)" | xargs git branch -D
  done
  cd ${pwd}
}

mcreateBranch() {
  local "pwd=$(pwd)"
  for d in $(find . -type d -maxdepth 1 | sed 's/\.\///g' | tail -n +2); do
    local fullPath="${pwd}/$d"
    echo ; echo ; echo ; echo "${fullPath}"
    cd "${fullPath}"

    # skip dir if it is not a git repo
    git rev-parse --is-inside-work-tree 2> /dev/null > /dev/null || continue

    git status

    echo -n "Commit all files in this repo (Y/n)?"
    read choice
    case "$choice" in
      n|N ) echo "not adding any files, skipping repo ${fullPath}"; continue ;;
      y|Y|"" ) echo "adding all files for repo ${fullPath}"; git add . ;;
      * ) echo "invalid value, must be y or n"; cd ${pwd}; return 1 ;;
    esac

    createBranch ${@}
  done
  cd ${pwd}
}
